<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>为人民服务</title>
  
  <subtitle>人生就是一段旅行,不在乎沿途风景,而在乎是谁的陪同</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-14T06:56:43.087Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴才益</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言判断一个字符串是不是回文</title>
    <link href="http://yoursite.com/2019/12/14/Palindrome/"/>
    <id>http://yoursite.com/2019/12/14/Palindrome/</id>
    <published>2019-12-13T16:00:00.000Z</published>
    <updated>2019-12-14T06:56:43.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>回文一般指 从前往后和从后往前读的顺序一样 比如一个回文字符串 “ABCBA”</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>一般横容易想到下面的方法：<br><img src="/2019/12/14/Palindrome/1.png" class=""><br>就是从头和尾开始依次比较<br><strong><a href="/2019/12/14/Palindrome/isPalindrome.c" title="代码">代码</a></strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times = n/<span class="number">2</span>;<span class="comment">//比较的次数</span></span><br><span class="line">    <span class="keyword">char</span> *first = str;<span class="comment">//指向头</span></span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">end</span> = str + n - <span class="number">1</span>;<span class="comment">//指向尾</span></span><br><span class="line">    <span class="keyword">while</span> (times)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*first != *<span class="built_in">end</span>)<span class="comment">//头尾内容是否一致</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不是回文</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移动到下一个位置</span></span><br><span class="line">        first ++;</span><br><span class="line">        <span class="built_in">end</span> --;</span><br><span class="line">        times--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是回文</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回文&quot;&gt;&lt;a href=&quot;#回文&quot; class=&quot;headerlink&quot; title=&quot;回文&quot;&gt;&lt;/a&gt;回文&lt;/h1&gt;&lt;h2 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
    
      <category term="c语言" scheme="http://yoursite.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="回文" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>求Fibonacci数列的两种实现方式</title>
    <link href="http://yoursite.com/2019/12/13/fibonacci/"/>
    <id>http://yoursite.com/2019/12/13/fibonacci/</id>
    <published>2019-12-13T03:02:43.859Z</published>
    <updated>2019-12-13T05:53:10.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><div class="table-container"><table><thead><tr><th>1</th><th>1</th><th>2</th><th>3</th><th>5</th><th>8</th><th>….</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><blockquote><p>从第3项开始，每一项都等于前两项之和。</p></blockquote><p><strong>表达式:</strong></p><script type="math/tex; mode=display">f(i)=\begin{cases}1 & i=1,2\\ f(i-1)+f(i-2)& i>2 \end{cases}</script><h2 id="C语言递归实现"><a href="#C语言递归实现" class="headerlink" title="C语言递归实现"></a>C语言递归实现</h2><p>通过定义可以容易写出fibinacci数列递归形式<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || i == <span class="number">1</span>)<span class="comment">//数组从下标0开始</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Fib(i - <span class="number">1</span>) + Fib(i - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line">    <span class="comment">// 设值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = Fib(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h2><p>在某些时刻,递归思考起来很简答,但是它的效率不高.<br>如果能直接获得前两项的值$f(i-1)和f(i-2)$而不是一层一层的递归下去求解,那么效率明显会提高.<br>设数组$a[i]=a[i-1]+a[i-2]$是不是和上面的式子很像.但这里数组可以直接通过下标取值,不需要一层一层递归下区求解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line">    <span class="comment">// 设置前两项的值</span></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>如果你对递归和非递归的效率问题还不是很理解,当你把上面代码中的求前20项的数值改大一些你就能感受到二者的效率差别.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Fibonacci数列&quot;&gt;&lt;a href=&quot;#Fibonacci数列&quot; class=&quot;headerlink&quot; title=&quot;Fibonacci数列&quot;&gt;&lt;/a&gt;Fibonacci数列&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序C语言实现</title>
    <link href="http://yoursite.com/2019/12/12/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/12/12/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-13T03:02:20.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡算法排序"><a href="#冒泡算法排序" class="headerlink" title="冒泡算法排序"></a>冒泡算法排序</h1><blockquote><p>冒泡算法是一种交换排序,每一次将最大/最小的数字 移动到末尾</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考:"></a>思考:</h2><ol><li>假设有n个数,每次遍历将最大/最小的数字交换到最后.</li><li>对剩下的n-1个数重复1的步骤.</li><li>当只剩下一个数字,或者某次遍历过程未发生交换时,排序结束.</li></ol></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><p><strong>bubbleSort.c</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> keys[], <span class="keyword">int</span> n, <span class="keyword">int</span> asc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> exchange = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n &amp;&amp; exchange; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        exchange = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (asc ? keys[j] &gt; keys[j + <span class="number">1</span>] : keys[j] &lt; keys[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(keys, j, j + <span class="number">1</span>);</span><br><span class="line">                exchange = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;冒泡算法排序&quot;&gt;&lt;a href=&quot;#冒泡算法排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡算法排序&quot;&gt;&lt;/a&gt;冒泡算法排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;冒泡算法是一种交换排序,每一次将最大/最小的数字 移动到末尾&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="冒泡排序" scheme="http://yoursite.com/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
      <category term="bubbleSort" scheme="http://yoursite.com/tags/bubbleSort/"/>
    
  </entry>
  
  <entry>
    <title>输出100内的素数</title>
    <link href="http://yoursite.com/2019/12/12/%E8%BE%93%E5%87%BA100%E5%86%85%E7%9A%84%E7%B4%A0%E6%95%B0/"/>
    <id>http://yoursite.com/2019/12/12/%E8%BE%93%E5%87%BA100%E5%86%85%E7%9A%84%E7%B4%A0%E6%95%B0/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2019-12-12T13:44:01.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="输出100内素数的C语言实现"><a href="#输出100内素数的C语言实现" class="headerlink" title="输出100内素数的C语言实现"></a>输出100内素数的C语言实现</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><blockquote><p>素数(质数)在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><ol><li>假定一个大于1的整数n是素数(从2开始)</li><li>那么n%i(i=2,3,.,.,.,n-1)都不等于0,那么这个数字是素数.</li><li>输出数字n.</li></ol></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><p><strong>isPrime.c</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">int</span> isPrime = <span class="number">1</span>;<span class="comment">//假设i是素数</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (i % j == <span class="number">0</span>)<span class="comment">//不满足素数条件</span></span><br><span class="line">          &#123;</span><br><span class="line">              isPrime = <span class="number">0</span>;<span class="comment">//确认这个数不是素数</span></span><br><span class="line">              <span class="keyword">break</span>;<span class="comment">//跳出这个循环</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isPrime)<span class="comment">//判断i是不是素数</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;输出100内素数的C语言实现&quot;&gt;&lt;a href=&quot;#输出100内素数的C语言实现&quot; class=&quot;headerlink&quot; title=&quot;输出100内素数的C语言实现&quot;&gt;&lt;/a&gt;输出100内素数的C语言实现&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
