<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>单例设计模式</title>
    <url>/2019/12/20/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例设计模式："><a href="#单例设计模式：" class="headerlink" title="单例设计模式："></a>单例设计模式：</h1><p>在一个程序中某个类的实例只会有一个，这样的设计模式叫单例设计模式。</p>
<p><strong>例：</strong> 一个游戏中所有的玩家公用一个游戏场景，那么可以将游戏场景设计为单列。<br><a id="more"></a></p>
<h2 id="如何设计一个单例模式"><a href="#如何设计一个单例模式" class="headerlink" title="如何设计一个单例模式"></a>如何设计一个单例模式</h2><p>要满足一个单例设计模式需要：</p>
<ol>
<li>将构造器私有化（不让外部来生成实例）</li>
<li>提供一个静态的该类对象（唯一的实例对象）。</li>
<li>向外提供一个静态的获取实例的方法getInstance（）<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li>
</ol>
<ul>
<li>饿汉式<br>饿汉式是一个未雨绸缪的方式，它提前准备好一个实例等着你来用。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon_hungry</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingleTon_hungry A = <span class="keyword">new</span> SingleTon_hungry();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingleTon_hungry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon_hungry <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> A;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		SingleTon_hungry instance1 = SingleTon_hungry.getInstance();</span><br><span class="line">		SingleTon_hungry instance2 = SingleTon_hungry.getInstance();</span><br><span class="line">		System.out.println(instance1==instance2);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>懒汉式<br>懒汉式是第一次用到才会生成一个实例，后面直接返回该实例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon_lazy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingleTon_lazy instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingleTon_lazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleTon_lazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			instance = <span class="keyword">new</span> SingleTon_lazy();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SingleTon_lazy instance1 = SingleTon_lazy.getInstance();</span><br><span class="line">		SingleTon_lazy instance2 = SingleTon_lazy.getInstance();</span><br><span class="line">		System.out.println(instance1 == instance2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2>在上面的两段代码中可以发现在懒汉式中的getInstance方法中添加了关键字synchronized,因为在多线程中懒汉模式是线程不安全的，如果有连个线程同时通过了if(instance==null)那么就会有两个不同的实例。<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>饿汉式线程安全，但是有点浪费资源，懒汉式可能会造成线程不安全，可以减少浪费。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>饿汉式</tag>
        <tag>懒汉式</tag>
      </tags>
  </entry>
  <entry>
    <title>web禁止多个客户端同时登录一个账号</title>
    <url>/2019/12/17/web%E7%A6%81%E6%AD%A2%E5%A4%9A%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%8C%E6%97%B6%E7%99%BB%E5%BD%95%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<p>你一定知道QQ以前不能同时在两个客户端上登录（目前可以手机和电脑同时在线），那么在网站中如何实现这个功能呢。</p>
<p>我这里使用的是session+application实现</p>
<ol>
<li>当用户首次登录时将session放到application中</li>
<li>下一次登录时从application中找这个session如果存在，且当前的session和上一次不同(不同客户端)则：使前一次的session失效（上一个客户端退出），将新的session更新到application中。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"text/plain"</span>);</span><br><span class="line">		PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">		HttpSession session = request.getSession();</span><br><span class="line">		ServletContext application = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">		String name = <span class="string">"admin"</span>;</span><br><span class="line">		String pwd = <span class="string">"123"</span>;</span><br><span class="line">		<span class="comment">// 从数据库中验证密码是否正确</span></span><br><span class="line">		<span class="keyword">if</span> (name == <span class="string">"admin"</span> &amp;&amp; pwd == <span class="string">"123"</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"密码验证通过"</span>);</span><br><span class="line">			<span class="comment">// 获取上一个客户端session</span></span><br><span class="line">			HttpSession last = (HttpSession) application.getAttribute(name);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;<span class="comment">// 在第一台客户端登录时</span></span><br><span class="line">				application.setAttribute(name, session);</span><br><span class="line">				System.out.println(<span class="string">"第一个客户端登录成功"</span>);</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (last != session) &#123;<span class="comment">// 不是同一个客户端的的session设置之前的session失效（下线），更新application中的session</span></span><br><span class="line">				last.invalidate();</span><br><span class="line">				System.out.println(<span class="string">"第一个客户端下线"</span>);</span><br><span class="line">				application.setAttribute(name, session);</span><br><span class="line">				System.out.println(<span class="string">"第二个客户端登陆成功"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			out.write(<span class="string">"success"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			out.write(<span class="string">"failure"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>session</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言判断一个字符串是不是回文</title>
    <url>/2019/12/14/Palindrome/</url>
    <content><![CDATA[<h2 id="回文定义："><a href="#回文定义：" class="headerlink" title="回文定义："></a>回文定义：</h2><p>回文一般指 从前往后和从后往前读的顺序一样 比如一个回文字符串 “ABCBA”</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>一般横容易想到下面的方法：<br><img src="/2019/12/14/Palindrome/1.png" class=""><br>就是从头和尾开始依次比较<br><strong><a href="/2019/12/14/Palindrome/isPalindrome.c" title="代码">代码</a></strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times = n/<span class="number">2</span>;<span class="comment">//比较的次数</span></span><br><span class="line">    <span class="keyword">char</span> *first = str;<span class="comment">//指向头</span></span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">end</span> = str + n - <span class="number">1</span>;<span class="comment">//指向尾</span></span><br><span class="line">    <span class="keyword">while</span> (times)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*first != *<span class="built_in">end</span>)<span class="comment">//头尾内容是否一致</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不是回文</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移动到下一个位置</span></span><br><span class="line">        first ++;</span><br><span class="line">        <span class="built_in">end</span> --;</span><br><span class="line">        times--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是回文</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>c语言</tag>
        <tag>回文</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言统计某个字符串中某个单词出现的次数</title>
    <url>/2019/12/14/totalNum/</url>
    <content><![CDATA[<h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h2><blockquote>
<p><code>char *strstr(const char *s1, const char *s2)</code>　在头文件<code>string.h</code>中，作用是返回字符串中首次出现子串的地址,没有找到返回NULL</p>
</blockquote>
<h2 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h2><ol>
<li>在一个字符串str中找到指定单index词(strstr不返回NUll)，计数变量count++。</li>
<li>修改str为index之后的字符串，重复（1）</li>
<li>若在str中找不到index程序结束，输出结果<br><strong>代码</strong></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p=<span class="string">"hellodfdfshellodsfaffehellodfafehellodfsdfg"</span>;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> * index = <span class="built_in">strstr</span>(p,<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">if</span>(index==<span class="literal">NULL</span>)<span class="comment">//没有找到</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;<span class="comment">//找到一次</span></span><br><span class="line">        <span class="comment">//修改p地址 p=这一次出现hello的地址+hello的长度</span></span><br><span class="line">        p=index+<span class="built_in">strlen</span>(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,count);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C语言</tag>
        <tag>统计单词</tag>
      </tags>
  </entry>
  <entry>
    <title>求Fibonacci数列的两种实现方式</title>
    <url>/2019/12/13/fibonacci/</url>
    <content><![CDATA[<h1 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><div class="table-container">
<table>
<thead>
<tr>
<th>1</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>5</th>
<th>8</th>
<th>….</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>从第3项开始，每一项都等于前两项之和。</p>
</blockquote>
<p><strong>表达式:</strong></p>
<script type="math/tex; mode=display">f(i)=\begin{cases}
1 & i=1,2\\
 f(i-1)+f(i-2)& i>2 
\end{cases}</script><h2 id="C语言递归实现"><a href="#C语言递归实现" class="headerlink" title="C语言递归实现"></a>C语言递归实现</h2><p>通过定义可以容易写出fibinacci数列递归形式<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || i == <span class="number">1</span>)<span class="comment">//数组从下标0开始</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Fib(i - <span class="number">1</span>) + Fib(i - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line">    <span class="comment">// 设值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = Fib(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h2><p>在某些时刻,递归思考起来很简答,但是它的效率不高.<br>如果能直接获得前两项的值$f(i-1)和f(i-2)$而不是一层一层的递归下去求解,那么效率明显会提高.<br>设数组$a[i]=a[i-1]+a[i-2]$是不是和上面的式子很像.但这里数组可以直接通过下标取值,不需要一层一层递归下区求解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">20</span>];</span><br><span class="line">    <span class="comment">// 设置前两项的值</span></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>如果你对递归和非递归的效率问题还不是很理解,当你把上面代码中的求前20项的数值改大一些你就能感受到二者的效率差别.</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>冒泡排序C语言实现</title>
    <url>/2019/12/12/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="冒泡算法排序"><a href="#冒泡算法排序" class="headerlink" title="冒泡算法排序"></a>冒泡算法排序</h1><blockquote>
<p>冒泡算法是一种交换排序,每一次将最大/最小的数字 移动到末尾</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考:"></a>思考:</h2><ol>
<li>假设有n个数,每次遍历将最大/最小的数字交换到最后.</li>
<li>对剩下的n-1个数重复1的步骤.</li>
<li>当只剩下一个数字,或者某次遍历过程未发生交换时,排序结束.</li>
</ol>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><p><strong>bubbleSort.c</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> keys[], <span class="keyword">int</span> n, <span class="keyword">int</span> asc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> exchange = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n &amp;&amp; exchange; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        exchange = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (asc ? keys[j] &gt; keys[j + <span class="number">1</span>] : keys[j] &lt; keys[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(keys, j, j + <span class="number">1</span>);</span><br><span class="line">                exchange = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>冒泡排序</tag>
        <tag>bubbleSort</tag>
      </tags>
  </entry>
  <entry>
    <title>输出100内的素数</title>
    <url>/2019/12/12/%E8%BE%93%E5%87%BA100%E5%86%85%E7%9A%84%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[<h1 id="输出100内素数的C语言实现"><a href="#输出100内素数的C语言实现" class="headerlink" title="输出100内素数的C语言实现"></a>输出100内素数的C语言实现</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><blockquote>
<p>素数(质数)在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><ol>
<li>假定一个大于1的整数n是素数(从2开始)</li>
<li>那么n%i(i=2,3,.,.,.,n-1)都不等于0,那么这个数字是素数.</li>
<li>输出数字n.</li>
</ol>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><p><strong>isPrime.c</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">int</span> isPrime = <span class="number">1</span>;<span class="comment">//假设i是素数</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (i % j == <span class="number">0</span>)<span class="comment">//不满足素数条件</span></span><br><span class="line">          &#123;</span><br><span class="line">              isPrime = <span class="number">0</span>;<span class="comment">//确认这个数不是素数</span></span><br><span class="line">              <span class="keyword">break</span>;<span class="comment">//跳出这个循环</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isPrime)<span class="comment">//判断i是不是素数</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
</search>
